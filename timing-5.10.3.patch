diff -ruN linux-5.10.3/arch/x86/kvm/svm/svm.c linux-5.10.3-patch/arch/x86/kvm/svm/svm.c
--- linux-5.10.3/arch/x86/kvm/svm/svm.c	2020-12-26 07:02:46.000000000 -0800
+++ linux-5.10.3-patch/arch/x86/kvm/svm/svm.c	2020-12-30 02:40:29.296067034 -0800
@@ -1155,6 +1155,7 @@
 	svm_set_intercept(svm, INTERCEPT_XSETBV);
 	svm_set_intercept(svm, INTERCEPT_RDPRU);
 	svm_set_intercept(svm, INTERCEPT_RSM);
+    svm_set_intercept(svm, INTERCEPT_RDTSC);
 
 	if (!kvm_mwait_in_guest(svm->vcpu.kvm)) {
 		svm_set_intercept(svm, INTERCEPT_MONITOR);
@@ -2176,6 +2177,8 @@
 
 static int wbinvd_interception(struct vcpu_svm *svm)
 {
+    svm->vcpu.run->exit_reason = 123;
+    
 	return kvm_emulate_wbinvd(&svm->vcpu);
 }
 
@@ -2184,6 +2187,8 @@
 	u64 new_bv = kvm_read_edx_eax(&svm->vcpu);
 	u32 index = kvm_rcx_read(&svm->vcpu);
 
+    svm->vcpu.run->exit_reason = 123;
+    
 	if (kvm_set_xcr(&svm->vcpu, index, new_bv) == 0) {
 		return kvm_skip_emulated_instruction(&svm->vcpu);
 	}
@@ -2263,6 +2268,7 @@
 
 static int cpuid_interception(struct vcpu_svm *svm)
 {
+    svm->vcpu.run->exit_reason = 123;
 	return kvm_emulate_cpuid(&svm->vcpu);
 }
 
@@ -2278,6 +2284,8 @@
 
 static int invd_interception(struct vcpu_svm *svm)
 {
+    svm->vcpu.run->exit_reason = 123;
+    
 	/* Treat an INVD instruction as a NOP and just skip it. */
 	return kvm_skip_emulated_instruction(&svm->vcpu);
 }
@@ -2858,6 +2866,24 @@
 	return kvm_handle_invpcid(vcpu, type, gva);
 }
 
+static int handle_rdtsc_interception(struct vcpu_svm *svm) 
+{
+	u64 differece;
+	u64 final_time;
+	u64 data;
+	
+	differece = rdtsc() - svm->vcpu.last_exit_start;
+	final_time = svm->vcpu.total_exit_time + differece;
+
+	data = rdtsc() - final_time;
+
+	svm->vcpu.arch.regs[VCPU_REGS_RAX] = data & -1u;
+	svm->vcpu.arch.regs[VCPU_REGS_RDX] = (data >> 32) & -1u;
+
+	svm->vcpu.run->exit_reason = 123;
+	return nop_interception(svm);
+}
+
 static int (*const svm_exit_handlers[])(struct vcpu_svm *svm) = {
 	[SVM_EXIT_READ_CR0]			= cr_interception,
 	[SVM_EXIT_READ_CR3]			= cr_interception,
@@ -2925,6 +2951,7 @@
 	[SVM_EXIT_RSM]                          = rsm_interception,
 	[SVM_EXIT_AVIC_INCOMPLETE_IPI]		= avic_incomplete_ipi_interception,
 	[SVM_EXIT_AVIC_UNACCELERATED_ACCESS]	= avic_unaccelerated_access_interception,
+    [SVM_EXIT_RDTSC]                = handle_rdtsc_interception,
 };
 
 static void dump_vmcb(struct kvm_vcpu *vcpu)
diff -ruN linux-5.10.3/arch/x86/kvm/x86.c linux-5.10.3-patch/arch/x86/kvm/x86.c
--- linux-5.10.3/arch/x86/kvm/x86.c	2020-12-26 07:02:46.000000000 -0800
+++ linux-5.10.3-patch/arch/x86/kvm/x86.c	2020-12-30 02:33:21.172736482 -0800
@@ -3338,6 +3338,9 @@
 
 int kvm_get_msr_common(struct kvm_vcpu *vcpu, struct msr_data *msr_info)
 {
+    u64 differece;
+    u64 final_time;
+    
 	switch (msr_info->index) {
 	case MSR_IA32_PLATFORM_ID:
 	case MSR_IA32_EBL_CR_POWERON:
@@ -3407,10 +3410,12 @@
 		 * return L1's TSC value to ensure backwards-compatible
 		 * behavior for migration.
 		 */
-		u64 tsc_offset = msr_info->host_initiated ? vcpu->arch.l1_tsc_offset :
-							    vcpu->arch.tsc_offset;
-
-		msr_info->data = kvm_scale_tsc(vcpu, rdtsc()) + tsc_offset;
+		differece = rdtsc() - vcpu->last_exit_start;
+        final_time = vcpu->total_exit_time + differece;
+        
+		msr_info->data = rdtsc() - final_time;
+        
+        vcpu->run->exit_reason = 123;
 		break;
 	}
 	case MSR_MTRRcap:
@@ -8738,7 +8743,7 @@
  * exiting to the userspace.  Otherwise, the value will be returned to the
  * userspace.
  */
-static int vcpu_enter_guest(struct kvm_vcpu *vcpu)
+static int vcpu_enter_guest_real(struct kvm_vcpu *vcpu)
 {
 	int r;
 	bool req_int_win =
@@ -9037,6 +9042,24 @@
 	return r;
 }
 
+static int vcpu_enter_guest(struct kvm_vcpu *vcpu) 
+{
+	int result;
+	u64 differece;
+
+	vcpu->last_exit_start = rdtsc();
+
+	result = vcpu_enter_guest_real(vcpu);
+
+	if (vcpu->run->exit_reason == 123) 
+	{
+		differece = rdtsc() - vcpu->last_exit_start;
+		vcpu->total_exit_time += differece;
+	}
+
+	return result;
+}
+
 static inline int vcpu_block(struct kvm *kvm, struct kvm_vcpu *vcpu)
 {
 	if (!kvm_arch_vcpu_runnable(vcpu) &&
diff -ruN linux-5.10.3/include/linux/kvm_host.h linux-5.10.3-patch/include/linux/kvm_host.h
--- linux-5.10.3/include/linux/kvm_host.h	2020-12-26 07:02:46.000000000 -0800
+++ linux-5.10.3-patch/include/linux/kvm_host.h	2020-12-30 02:36:13.922735359 -0800
@@ -285,6 +285,9 @@
 	struct kvm_vcpu_stat stat;
 	unsigned int halt_poll_ns;
 	bool valid_wakeup;
+    
+    u64 last_exit_start;
+	u64 total_exit_time;
 
 #ifdef CONFIG_HAS_IOMEM
 	int mmio_needed;
